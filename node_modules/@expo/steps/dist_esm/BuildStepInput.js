import { BuildStepRuntimeError } from './errors.js';
import { interpolateWithOutputs } from './utils/template.js';
export class BuildStepInput {
    static createProvider(params) {
        return (ctx, stepDisplayName) => new BuildStepInput(ctx, { ...params, stepDisplayName });
    }
    constructor(ctx, { id, stepDisplayName, allowedValues, defaultValue, required = true }) {
        this.ctx = ctx;
        this.id = id;
        this.stepDisplayName = stepDisplayName;
        this.allowedValues = allowedValues;
        this.defaultValue = defaultValue;
        this.required = required;
    }
    get value() {
        var _a;
        const rawValue = (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
        if (this.required && rawValue === undefined) {
            throw new BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" is required but it was not set.`);
        }
        if (rawValue === undefined) {
            return rawValue;
        }
        else {
            return interpolateWithOutputs(rawValue, (path) => { var _a; return (_a = this.ctx.getStepOutputValue(path)) !== null && _a !== void 0 ? _a : ''; });
        }
    }
    set(value) {
        if (this.required && value === undefined) {
            throw new BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" is required.`);
        }
        this._value = value;
        return this;
    }
    isValueOneOfAllowedValues() {
        var _a;
        const value = (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
        if (this.allowedValues === undefined || value === undefined) {
            return true;
        }
        return this.allowedValues.includes(value);
    }
}
export function makeBuildStepInputByIdMap(inputs) {
    if (inputs === undefined) {
        return {};
    }
    return inputs.reduce((acc, input) => {
        acc[input.id] = input;
        return acc;
    }, {});
}
//# sourceMappingURL=BuildStepInput.js.map